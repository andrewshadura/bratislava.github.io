"use strict";(self.webpackChunkbratislava_github_io=self.webpackChunkbratislava_github_io||[]).push([[4608],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>u});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=n.createContext({}),c=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=c(e.components);return n.createElement(o.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),u=r,b=d["".concat(o,".").concat(u)]||d[u]||m[u]||s;return t?n.createElement(b,l(l({ref:a},p),{},{components:t})):n.createElement(b,l({ref:a},p))}));function u(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,l=new Array(s);l[0]=d;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<s;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6823:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=t(7462),r=(t(7294),t(3905));const s={},l="Environment variables & Secrets",i={unversionedId:"deployment-and-infrastructure/env-vars-and-secrets",id:"deployment-and-infrastructure/env-vars-and-secrets",title:"Environment variables & Secrets",description:"TODO CONTINUE HERE",source:"@site/docs/deployment-and-infrastructure/env-vars-and-secrets.md",sourceDirName:"deployment-and-infrastructure",slug:"/deployment-and-infrastructure/env-vars-and-secrets",permalink:"/docs/deployment-and-infrastructure/env-vars-and-secrets",draft:!1,editUrl:"https://github.com/bratislava/bratislava.github.io/edit/master/docs/deployment-and-infrastructure/env-vars-and-secrets.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Deployment",permalink:"/docs/deployment-and-infrastructure/deployment"},next:{title:"Grafana",permalink:"/docs/deployment-and-infrastructure/grafana"}},o={},c=[{value:"Database naming convention",id:"database-naming-convention",level:4},{value:"Tips &amp; Tricks",id:"tips--tricks",level:3}],p={toc:c};function m(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"environment-variables--secrets"},"Environment variables & Secrets"),(0,r.kt)("admonition",{title:"bratiska-cli ",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"TODO CONTINUE HERE ")),(0,r.kt)("h1",{id:"secrets"},"Secrets"),(0,r.kt)("p",null,"We are using ",(0,r.kt)("inlineCode",{parentName:"p"},"Sealed Secrets")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitnami-labs/sealed-secrets"},"https://github.com/bitnami-labs/sealed-secrets"),".\nTo use a secret in your project, you have to install ",(0,r.kt)("inlineCode",{parentName:"p"},"kubeseal")," if you haven`t installed it yet. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"brew install kubeseal\n")),(0,r.kt)("p",null,"The next thing is going to the folder ",(0,r.kt)("inlineCode",{parentName:"p"},"secrets")," where all our secrets are stored:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd kubernetes/base/secrets\n")),(0,r.kt)("p",null,"After that, we need to create a temp file for our new secrets. Let's assume we want database connection secretes. You need to make this file ",(0,r.kt)("inlineCode",{parentName:"p"},"database.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Secret\nmetadata:\n  name: database-secret\nannotation:\n  sealedsecrets.bitnami.com/managed: "true"\ndata:\n  POSTGRES_DB: YmFuYW5h\n  POSTGRES_USER: YmFuYW5h\n  POSTGRES_PASSWORD: YmFuYW5h\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"metadata.name")," is the name of the group of secrets in our case, ",(0,r.kt)("inlineCode",{parentName:"li"},"database-secret")," - if this is app specific, it is often prefix by app name, so for example ",(0,r.kt)("inlineCode",{parentName:"li"},"bratislava-strapi-database-secret")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"annotation/sealedsecrets.bitnami.com"),' automatically creates "unsealed" secret inside k8 cluster, managed by the bitnami secret plugin'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data")," contains environment variables keys (",(0,r.kt)("inlineCode",{parentName:"li"},"POSTGRES_DB"),") and base64 encode values (",(0,r.kt)("inlineCode",{parentName:"li"},"YmFuYW5h"),").")),(0,r.kt)("p",null,"For example, if you need to set up the database name to ",(0,r.kt)("inlineCode",{parentName:"p"},"banana"),", you need to base64 encode this value. You can use an online base64 converter like ",(0,r.kt)("a",{parentName:"p",href:"https://www.base64encode.org"},"https://www.base64encode.org")," and encode ",(0,r.kt)("inlineCode",{parentName:"p"},"banana")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"YmFuYW5h"),". This has to happen even if the value you want to provide is base64 encoded! In such case you'll take your base64 encoded value and encode it again."),(0,r.kt)("p",null,"The last thing is encrypting our secrets by kubeseal to be used on Kubernetes. You need to run this command that creates the file ",(0,r.kt)("inlineCode",{parentName:"p"},"database.secret.yml")," where all our values are encrypted and safe to add to the repository."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubeseal --controller-name=sealed-secrets --scope=namespace-wide --namespace=standalone --format=yaml < database.yml > database.secret.yml \n")),(0,r.kt)("p",null,"If you want to propagate a sealed secret to Kubernetes without a pipeline, you can run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create -f database.secret.yml\n")),(0,r.kt)("p",null,"If you already have a sealed secret in Kubernetes, you can update it with the command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f database.secret.yml\n")),(0,r.kt)("p",null,"Usually, you get this kind of error: ",(0,r.kt)("inlineCode",{parentName:"p"},'Error from server (AlreadyExists): error when creating "database.secret.yml": sealedsecrets.bitnami.com "nest-Prisma-template-database-secret" already exists')),(0,r.kt)("p",null,"If you want to check if your secret is there, you can run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secret --namespace=standalone nest-prisma-template-database-secret\n")),(0,r.kt)("h4",{id:"database-naming-convention"},"Database naming convention"),(0,r.kt)("p",null,"Please use our services names (project-slugs) as database names and users. In this case, we will use ",(0,r.kt)("inlineCode",{parentName:"p"},"nest-prisma-template"),". And for passwords, use at least 16 characters long pass with random chars."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"POSTGRES_DB: nest-prisma-template\nPOSTGRES_USER: nest-prisma-template\nPOSTGRES_PASSWORD: LBcdso08b&aasd(ck2*d!p\n")),(0,r.kt)("p",null,"which after base64 encoding looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"POSTGRES_DB: bmVzdC1wcmlzbWEtdGVtcGxhdGU=\nPOSTGRES_USER: bmVzdC1wcmlzbWEtdGVtcGxhdGU=\nPOSTGRES_PASSWORD: TEJjZHNvMDhiJmFhc2QoY2syKmQhcA==\n")),(0,r.kt)("h3",{id:"tips--tricks"},"Tips & Tricks"),(0,r.kt)("p",null,"If you don't need special settings for your secret, you can create entire ",(0,r.kt)("inlineCode",{parentName:"p"},"kubesealed")," secret by running following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},' kubectl create secret generic <SECRET_NAME> --from-literal=<KEY>=<VALUE> --dry-run=client -o json \\\n | jq \'. += { "annotation": {"sealedsecrets.bitnami.com/managed": "true"} }\' \\\n | kubeseal --controller-name=sealed-secrets --scope=namespace-wide -o yaml --namespace=<NAMESPACE>\n')),(0,r.kt)("p",null,"Sticking with our banana example, we create a ",(0,r.kt)("inlineCode",{parentName:"p"},"database-secret"),' with "banana" user, password and DB in namespace ',(0,r.kt)("inlineCode",{parentName:"p"},'"standalone"')," and push it to the file name ",(0,r.kt)("inlineCode",{parentName:"p"},"database.secret.yml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},' kubectl create secret generic database-secret \\\n    --from-literal=POSTGRES_DB=banana \\\n    --from-literal=POSTGRES_USER=banana \\\n    --from-literal=POSTGRES_PASSWORD=banana \\\n  --dry-run=client -o json \\\n | jq \'. += { "annotation": {"sealedsecrets.bitnami.com/managed": "true"} }\' \\\n | kubeseal --controller-name=sealed-secrets --scope=namespace-wide -o yaml --namespace=standalone > database.secret.yml\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note, you may need to install ",(0,r.kt)("a",{parentName:"em",href:"https://stedolan.github.io/jq/"},(0,r.kt)("inlineCode",{parentName:"a"},"jq"))," by standard means like")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"brew install jq\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"or Debian based")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"apt install jq\n")))}m.isMDXComponent=!0}}]);