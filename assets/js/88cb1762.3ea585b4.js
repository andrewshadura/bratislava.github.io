"use strict";(self.webpackChunkbratislava_github_io=self.webpackChunkbratislava_github_io||[]).push([[6727],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,b=d["".concat(c,".").concat(m)]||d[m]||s[m]||a;return n?r.createElement(b,o(o({ref:t},u),{},{components:n})):r.createElement(b,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1858:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const a={},o="Debugging k8s cluster connectivity to an outside service",l={unversionedId:"recipes/debug-cluster-connectivity",id:"recipes/debug-cluster-connectivity",title:"Debugging k8s cluster connectivity to an outside service",description:"Let's assume you want to check if you can ping a service from the  next-city-library pod.",source:"@site/docs/recipes/debug-cluster-connectivity.md",sourceDirName:"recipes",slug:"/recipes/debug-cluster-connectivity",permalink:"/docs/recipes/debug-cluster-connectivity",draft:!1,editUrl:"https://github.com/bratislava/bratislava.github.io/edit/master/docs/recipes/debug-cluster-connectivity.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Recipes",permalink:"/docs/category/recipes"},next:{title:"Docker setup",permalink:"/docs/recipes/docker-setup"}},c={},p=[],u={toc:p};function s(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"debugging-k8s-cluster-connectivity-to-an-outside-service"},"Debugging k8s cluster connectivity to an outside service"),(0,i.kt)("p",null,"Let's assume you want to check if you can ping a service from the  ",(0,i.kt)("inlineCode",{parentName:"p"},"next-city-library")," pod."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("h3",{parentName:"li",id:"connect-to-proper-kubernetes-cluster"},"Connect to proper Kubernetes cluster"),(0,i.kt)("p",{parentName:"li"},"In our case, we will connect to ",(0,i.kt)("inlineCode",{parentName:"p"},"tkg-innov-prod"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("h3",{parentName:"li",id:"check-if-you-are-incorrect-cluster-context"},"Check if you are incorrect cluster context"),(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl config current-context"),", and if it matches your desired cluster, you are good to go.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("h3",{parentName:"li",id:"check-if-your-service-is-running-in-a-pod"},"Check if your service is running in a pod."),(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl get pods --namespace=bratislava-monorepo")," and find your desired pod and copy its name like: ",(0,i.kt)("inlineCode",{parentName:"p"},"next-city-library-app-b868fcd5c-lj6tb"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("h3",{parentName:"li",id:"create-a-new-debug-pod-with-ubuntu"},"Create a new debug pod with ubuntu"),(0,i.kt)("p",{parentName:"li"},"Now we will create a new debug pod with ubuntu, and we will attach the container to the pod so we can easily debug it. Run this command: ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl debug next-city-library-app-b868fcd5c-lj6to -it --namespace=bratislava-monorepo --image=ubuntu --share-processes --copy-to=next-city-library-app-debug"),". Don't forget to update the proper pod and ",(0,i.kt)("inlineCode",{parentName:"p"},"--copy-to")," to the name you want. Under ",(0,i.kt)("inlineCode",{parentName:"p"},"--copy-to"),", you will find the running pod. This command will also open a terminal in the pod.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("h3",{parentName:"li",id:"update-repositories-in-ubuntu"},"Update repositories in ubuntu"),(0,i.kt)("p",{parentName:"li"},"To be able to use ",(0,i.kt)("inlineCode",{parentName:"p"},"apt install"),", you need first to update its registries with this command: ",(0,i.kt)("inlineCode",{parentName:"p"},"apt-get update"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("h3",{parentName:"li",id:"install-needed-debugging-utilities-for-ubuntu"},"Install needed debugging utilities for ubuntu"),(0,i.kt)("p",{parentName:"li"},"For debugging, you will probably need some networking tools. You can install it with these commands:"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ping: ",(0,i.kt)("inlineCode",{parentName:"li"},"apt-get install iputils-ping")),(0,i.kt)("li",{parentName:"ul"},"nslookup: ",(0,i.kt)("inlineCode",{parentName:"li"},"apt-get install dnsutils")),(0,i.kt)("li",{parentName:"ul"},"wget: ",(0,i.kt)("inlineCode",{parentName:"li"},"apt install wget")),(0,i.kt)("li",{parentName:"ul"},"curl: ",(0,i.kt)("inlineCode",{parentName:"li"},"apt install curl"))),(0,i.kt)("ol",{start:7},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("h3",{parentName:"li",id:"clean-ubuntu"},"Clean ubuntu"),"After you are done with debugging, you can clean the ubuntu pod with this command: ",(0,i.kt)("inlineCode",{parentName:"li"},"kubectl delete pod next-city-library-app-debug --namespace=bratislava-monorepo"))))}s.isMDXComponent=!0}}]);