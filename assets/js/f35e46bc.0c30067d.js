"use strict";(self.webpackChunkbratislava_github_io=self.webpackChunkbratislava_github_io||[]).push([[2546],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},g=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),u=s(n),h=a,d=u["".concat(p,".").concat(h)]||u[h]||c[h]||o;return n?r.createElement(d,l(l({ref:t},g),{},{components:n})):r.createElement(d,l({ref:t},g))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5171:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={},l="Connecting to GraphQL APIs using GraphQL Codegen",i={unversionedId:"technologies/graphql/codegen",id:"technologies/graphql/codegen",title:"Connecting to GraphQL APIs using GraphQL Codegen",description:"We're using GraphQL Codegen setup to generate typed clients for our gql servers - particularly Strapi CMS.",source:"@site/docs/technologies/graphql/codegen.md",sourceDirName:"technologies/graphql",slug:"/technologies/graphql/codegen",permalink:"/docs/technologies/graphql/codegen",draft:!1,editUrl:"https://github.com/bratislava/bratislava.github.io/edit/master/docs/technologies/graphql/codegen.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GraphQL",permalink:"/docs/category/graphql"},next:{title:"Exploring GraphQL Schemas",permalink:"/docs/technologies/graphql/exploring-graphql-schema"}},p={},s=[{value:"Project setup",id:"project-setup",level:2},{value:"Generating and using queries",id:"generating-and-using-queries",level:2},{value:"Using the generated client",id:"using-the-generated-client",level:2},{value:"Error handling",id:"error-handling",level:3},{value:"Note on using graphql-request",id:"note-on-using-graphql-request",level:2}],g={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"connecting-to-graphql-apis-using-graphql-codegen"},"Connecting to GraphQL APIs using GraphQL Codegen"),(0,a.kt)("p",null,"We're using ",(0,a.kt)("a",{parentName:"p",href:"https://www.graphql-code-generator.com/"},"GraphQL Codegen")," setup to generate typed clients for our gql servers - particularly Strapi CMS."),(0,a.kt)("p",null,"We're using ",(0,a.kt)("a",{parentName:"p",href:"https://www.graphql-code-generator.com/plugins/typescript/typescript-graphql-request"},"graphql-request plugin")),(0,a.kt)("h2",{id:"project-setup"},"Project setup"),(0,a.kt)("p",null,"Decide where your ",(0,a.kt)("inlineCode",{parentName:"p"},".graphql")," files will live, and where your client & types should be generated. Usually we use ",(0,a.kt)("inlineCode",{parentName:"p"},"/graphql/index.ts")," for the client and ",(0,a.kt)("inlineCode",{parentName:"p"},"/graphql/queries/**/*.graphql")," for both queries and mutations. With this setup, our ",(0,a.kt)("inlineCode",{parentName:"p"},"codegen.yml")," in our frontend (i.e. Nextjs) root looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml"},"schema: 'http://localhost:1337/graphql'\ndocuments: './graphql/queries/**/*.{gql,graphql}'\ngenerates:\n  graphql/index.ts:\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-graphql-request\n")),(0,a.kt)("p",null,"This means we're generating schema against a locally running strapi server."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"This implies we need a running local server to be able to regenerate our gql client - at the time of writing, strapi v4 does not have an easy way to export gql schema. We can use this approach once hey fix it.")),(0,a.kt)("p",null,"Add the following line into ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},' "scripts": {\n    ...\n    "gen": "graphql-codegen"\n  },\n')),(0,a.kt)("p",null,"and install the following dependencies, both dev and nondev:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"yarn add graphql graphql-tag graphql-request\nyarn add -D @graphql-codegen/cli @graphql-codegen/typescript @graphql-codegen/typescript-graphql-request @graphql-codegen/typescript-operations\n")),(0,a.kt)("p",null,"To use the generated client (sdk) against your graphql server, you need to initialize it, passing in the server endpoint as a parameter. We usually setup a file like ",(0,a.kt)("inlineCode",{parentName:"p"},"utils/gql.ts")," from which we export .the typed client itself The file below deals with different formats of urls being provided from within Kubernetes deployment and local development."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { getSdk } from '../graphql/index'\nimport { GraphQLClient } from 'graphql-request'\nimport getConfig from 'next/config'\n\nconst { serverRuntimeConfig } = getConfig()\n\n// URL becomes full url to strapi on server, but just /graphql (for proxy) on client\n// all the dealings with protocol are here because we route to a local service address from within k8s and to a full https:// url from local development\n\nconst protocol =\n  process.env.STRAPI_URL &&\n  (process.env.STRAPI_URL.startsWith('http://') || process.env.STRAPI_URL.startsWith('https://'))\n    ? ''\n    : 'http://'\nconst gql = new GraphQLClient(\n  `${process.env.STRAPI_URL ? `${protocol}${serverRuntimeConfig.strapiUrl}` : window.location.origin}/graphql`\n)\nexport const client = getSdk(gql)\n")),(0,a.kt)("h2",{id:"generating-and-using-queries"},"Generating and using queries"),(0,a.kt)("p",null,"You need at least a single valid query among your graphql files for client to generate correctly. Check out ",(0,a.kt)("a",{parentName:"p",href:"/docs/technologies/graphql/exploring-graphql-schema"},"Exploring GraphQL Schema")," to find a valid query for your server. Since most of our Strapi V4 instances have a 'pages' model, the following query to get the total amount of pages usually works:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"query TotalPages {\n  pages {\n    meta {\n      pagination {\n        total\n      }\n    }\n  }\n}\n")),(0,a.kt)("p",null,"You can put this query into a ",(0,a.kt)("inlineCode",{parentName:"p"},"*.graphql")," file into ",(0,a.kt)("inlineCode",{parentName:"p"},"/graphql/queries")," directory."),(0,a.kt)("p",null,"Afterwards, you should be able to run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"yarn gen\n")),(0,a.kt)("p",null,"If everything was setup correctly, this will generate ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql/index.ts")," file with valid types for your schema, as well as a client with a single query - ",(0,a.kt)("inlineCode",{parentName:"p"},"client.TotalPages")),(0,a.kt)("h2",{id:"using-the-generated-client"},"Using the generated client"),(0,a.kt)("p",null,"Continuing from previous example, if you import which will will return the following data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import {client} from '../utils/gql'\n\n// ...\n\nconst data = await client.TotalPages()\n\n/* \n  if successful, data will look as follows:\n  data = {\n    pages {\n      meta {\n        pagination {\n          total: 358 // the actual number will differ\n        }\n      }\n    }\n  }\n*/\n\n")),(0,a.kt)("p",null,"In next.js, you often do this inside ",(0,a.kt)("inlineCode",{parentName:"p"},"getStaticProps")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerSideProps"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export const getStaticProps: GetStaticProps = async (ctx) => {\n  // ...\n  const {pages} = await client.TotalPages()\n  return {\n    props: {\n      totalPages: pages.meta.pagination.total,\n    }\n  }\n}\n")),(0,a.kt)("p",null,"If you do this from frontend (loading data from within a React component), you likely want to wrap the client call in something like ",(0,a.kt)("a",{parentName:"p",href:"https://swr.vercel.app/"},"SWR"),", ",(0,a.kt)("a",{parentName:"p",href:"https://react-query-v3.tanstack.com/overview"},"React-Query"),", or just ",(0,a.kt)("inlineCode",{parentName:"p"},"useEffect"),". With SWR it looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"  const MyComponent = () => {\n    const { data, error } = useSWR('TotalPagesQuery', () => client.TotalPages())\n    const isLoading = !data && !error\n    return (\n      <div>\n        Total pages count: {isLoading ? 'Loading' : error ? 'Error!' : data.pages.meta.pagination.total}\n      </div>\n    )\n  }\n")),(0,a.kt)("p",null,"Read more in SWR/ReactQuery docs on handling params and other."),(0,a.kt)("h3",{id:"error-handling"},"Error handling"),(0,a.kt)("p",null,"If there's error on ",(0,a.kt)("em",{parentName:"p"},"any node")," of the result, the whole request will throw. You likely want it wrapped in a try-catch block. "),(0,a.kt)("p",null,"This can be dealt with differently (and often should be - so that one missing piece of data does not break your whole page) - read more in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/prisma-labs/graphql-request"},"docs of the graphql-request")," and the codegen graphql-request plugin linked above."),(0,a.kt)("h2",{id:"note-on-using-graphql-request"},"Note on using graphql-request"),(0,a.kt)("p",null,"At the time of writing there is also apollo-next plugin - the reason we use graphql-request, which is more barebones, is because it did not exist when we were setting this up initially. Apollo-next may be worth a shot with some future project"))}c.isMDXComponent=!0}}]);